import pandas as pd

# Define the path to the CSV file
file_path = 'PATH/TO/vulnerabilities.csv'


def generate_bibtex_with_cvss(row):
    """
    Function to generate a BibTeX entry with CVSS values for a row in the CSV data.
    """
    # CVSS values based on the provided information
    cvss_values = '"av = adjacent, ac = low, pr = low, ui = none, s = changed, c = high, i = none, a = none"'

    # Alternative shorthand notation
    cvss_values_short = '"av=a, ac=l, pr=l, ui=n, s=c, c=h, i=n, a=n"'

    # Description added to CVSS
    cvss_description = '"Etiam risus sapien, ornare at dui ut, semper eleifend arcu. In fermentum felis ut ornare ' \
                       'convallis." '

    # Addendum entry for CVSS entries
    cvss_addendum = 'crossref = {addendum}'

    # Title of the vulnerability with severity badge
    cvss_title = '"\\\makecvssbadge CVE-CVE-2023-36025 affects Windows 10 High\\label{CVE-CVE-2023-36025}"'

    # Graphic representation of CVSS values
    cvss_box = '"\\makecvssbox"'

    # Author information (replace with actual author name)
    author = '"Author Name"'

    # Sorting key (replace with a unique key)
    key = '"UniqueKeyForSorting"'

    bibtex_entry = f"@MISC{{CVE-{row['cve']},\n"
    bibtex_entry += f"  author = {author},\n"  # Add author field
    bibtex_entry += f"  key = {key},\n"  # Add sorting key
    bibtex_entry += f"  title = {{{row['Title']}}},\n"
    bibtex_entry += f"  howpublished = \"Available from MITRE, CVE-ID {row['cve']}.\",\n"
    bibtex_entry += f"  month = {row['published'].split('-')[1]},\n"
    bibtex_entry += f"  year = {{{row['published'].split('-')[0]}}},\n"
    bibtex_entry += f"  url = {{http://cve.mitre.org/cgi-bin/cvename.cgi?name={row['cve']} }},\n"
    bibtex_entry += "  urldate = {Unknown},\n"
    bibtex_entry += f"  cvss_values = {cvss_values},\n"
    bibtex_entry += f"  cvss_values_short = {cvss_values_short},\n"
    bibtex_entry += f"  cvss_description = {cvss_description},\n"
    bibtex_entry += f"  {cvss_addendum},\n"  # Include the crossref line
    bibtex_entry += f"  cvss_title = {cvss_title},\n"
    bibtex_entry += f"  cvss_box = {cvss_box}\n"
    bibtex_entry += "}}\n\n"
    return bibtex_entry


def generate_bibtex_with_cvss_for_all_rows(csv_file_path, output_file_path):
    vulnerabilities_df = pd.read_csv(csv_file_path)
    bibtex_entries = vulnerabilities_df.apply(generate_bibtex_with_cvss, axis=1)

    # Create the addendum entry
    addendum_entry = """@MISC{addendum,
  title = {Addendum Title},
  author = {Author Name},
  key = {Key},
  note = {This is the addendum note.},
}\n\n"""

    with open(output_file_path, 'w') as bibfile:
        bibfile.write(addendum_entry)
        for entry in bibtex_entries:
            bibfile.write(entry)


def remove_duplicate_entries(bib_file_path):
    with open(bib_file_path, 'r', encoding='utf-8') as bibfile:
        lines = bibfile.readlines()

    bib_entries = []
    unique_keys = set()
    duplicate_keys = set()

    current_entry = None

    for line in lines:
        line_stripped = line.strip()

        if line_stripped == '}' and current_entry is not None:
            bib_entries.append(line)
            entry = ''.join(bib_entries)
            citation_key = entry.split('{', 1)[1].split(',', 1)[0].strip()

            if citation_key in unique_keys:
                duplicate_keys.add(citation_key)
            else:
                unique_keys.add(citation_key)

            current_entry = None
            bib_entries = []

        if current_entry is not None:
            bib_entries.append(line)

        if line_stripped.startswith('@'):
            current_entry = line_stripped
            bib_entries = [line]

    cleaned_entries = []

    for line in lines:
        if line.strip() == '' or line.strip() == '}' or (
                current_entry and current_entry.strip().split('{', 1)[1].split(',', 1)[
            0].strip() not in duplicate_keys):
            cleaned_entries.append(line)

        if line.strip().startswith('@'):
            current_entry = line.strip()

    cleaned_bib_file_path = bib_file_path

    with open(cleaned_bib_file_path, 'w', encoding='utf-8') as cleaned_bibfile:
        cleaned_bibfile.writelines(cleaned_entries)

    return cleaned_bib_file_path


# Path to the output BibTeX file
output_bibtex_file_with_cvss = 'PATH/TO/cvss.bib'

# Generating the BibTeX file with CVSS values
generate_bibtex_with_cvss_for_all_rows(file_path, output_bibtex_file_with_cvss)

cvss_bib_file_path = 'PATH/TO/cvss.bib'
cleaned_cvss_bib_file_path = remove_duplicate_entries(cvss_bib_file_path)

print(f"Cleaned .bib file saved at {cleaned_cvss_bib_file_path}")
